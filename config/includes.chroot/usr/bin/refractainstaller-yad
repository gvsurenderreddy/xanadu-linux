#!/usr/bin/env bash
version="Refracta Installer (Yad) 9.0.9beta6 (20131204)"
# Copyright 2011, 2012, 2013 fsmithred@gmail.com
# Based on refractainstaller-8.0.3 by Dean Linkous
# License: GPL-3

configfile="/etc/refractainstaller.conf"

if [[ -f $configfile ]]; then
    source $configfile
else
	yad --title=Warning --window-icon=error \
	--button="Salir":0 \
	--text="  El archivo $configfile no existe.  
  "
	echo " El archivo $configfile no existe."
	exit 1
fi


exec 2>"$error_log"

show_help () {
	printf "$help_text"
	exit 0
}

help_text="
	Uso:  $0  [opciones]
	
	Use refractainstaller-yad desde un terminal sin opciones  
	o ejecutelo desde el menu herramientas del sistema.	
	
	opciones:
		-h, --help		muestra esta ayuda
		-v, --version		muestra la version
		-d. --debug		modo debug
		
"

while [[ $1 == -* ]]; do
	case "$1" in
	
		-h|--help)
			show_help ;;
		
		-v|--version)
			printf "\n$version\n\n" 
			exit 0 ;;
			
		-d|--debug)
			DEBUG="yes"
			break ;;
		
		*) 
			printf "\t opcion invalida: $1 \n\n"
			printf "\t Intente:  $0 -h para ayuda. \n\n"
			exit 1 ;;
    esac
done

if [[ $DEBUG = "yes" ]] ; then
	set -x
fi

[[ $DISPLAY ]] || { echo "No hay un servidor X corriendo. Saliendo..." ; exit 1 ; }
if [[ $(id -u) -ne 0 ]] ; then
	yad --title=Error --window-icon=error --text="
	Necesita ser root!
"
	exit 1
fi

yadversion=$(yad --version | cut -d. -f2)
if [[ $yadversion < 17 ]]; then
	yad --title=Error --window-icon=error --text="
	La version de yad es muy vieja. Necesita la version 0.17.1.1 o superior.
	Tambien puede usar refractainstaller-gui en lugar de esta version.
"
fi

if ! [[ -d /lib/live/mount/rootfs ]] ; then
	live_session_warning=" ###	ALERTA: No se esta ejecutando desde un live-CD o live-USB	### 
 ###	o usa una configuracion no soportada	### "
fi

yad --text-align=fill --borders=6 --title="Instalador" --button="Instalacion simple":0 \
	--button="Instalacion experta":1 --button="Salir":2 \
	--text="$live_session_warning

 Esta aplicacion instalara Xanadu GNU/Linux en su disco duro.

 Basado en refractainstaller-9.0.9beta6 por fsmithred@gmail.com. 
"
mode="$?"
	case $mode in
		0) install="simple" ;;
		1) install="expert" ;;
		2) exit 0 ;;
	esac



	grubversion=$(dpkg -l | egrep "ii|hi" | grep -v bin | grep -v doc | awk '$2 ~ "grub-[glp]" { print $2}')

check_exit () {
if [[ $? -ne 0 ]] ; then
   yad --question --title="Error" --window-icon=error --button="Continuar":0 --button="Salir ahora":1 \
   --text="Error detectado: $?  $error_message
\Vea $error_log para detalles. \n\nEsto puede no ser fatal.. Presione \"Continuar\" para proceder"

   if [[ $? -ne 0 ]] ; then
   cleanup
   exit 1
   fi
fi
}

copy_excludes () {
        cat > "$rsync_excludes" <<EOF

- /dev/*
- /cdrom/*
- /media/*
- /target
- /swapfile
- /mnt/*
- /sys/*
- /proc/*
- /tmp/*
- /live
- /boot/grub/grub.cfg
- /boot/grub/menu.lst
- /boot/grub/device.map
- /etc/udev/rules.d/70-persistent-cd.rules
- /etc/udev/rules.d/70-persistent-net.rules
- /etc/fstab
- /etc/fstab.d
- /etc/mtab
- /home/snapshot/
- /home/*/.gvfs
- /lib/live/overlay
- /lib/live/image
- /lib/live/rootfs
- /lib/live/mount
- /run/*

EOF

    chmod 666 "$rsync_excludes"
}

if ! [[ -f  $rsync_excludes ]] ; then
    yad --text-align=fill --borders=6 --title=ALERTA --window-icon=error \
    --button=Continuar:0 --button=Salir:1 \
    --text="  No esta el archivo de rsync excludes, o el nombre no corresponde con lo esperado.  
  Usted deberia continuar y permitir que el script cree uno.
    
  Si tiene algun otro disco o particion que no quiere que sea copiado, desmontelo o edite el archivo de exclusion para agregarlos."
    if [[ $? = 0 ]] ; then
		rsync_excludes="$(pwd)/installer_exclude.list"
        copy_excludes
        echo "@@@ copiado excludes a $(pwd)" >> "$error_log"
    else
        exit 0
    fi
fi

if [[ $run_preinstall = "yes" ]] ; then
	var16="TRUE"
else
	var16="FALSE"
fi
if [[ $run_postinstall = "yes" ]] ; then
	var17="TRUE"
else
	var17="FALSE"
fi

pre_install_list=$(ls -m /usr/lib/refractainstaller/pre-install)
post_install_list=$(ls -m /usr/lib/refractainstaller/post-install)

if [[ $install = "expert" ]]; then
    opts=$(yad --list --title="Opciones de instalacion" \
     --text="Marque las opciones que usted quiere para la instalacion.
Si usted no entiende una opcion, probablemente no la necesite." \
     --checklist --column "Marque" --column "Num" --column "Opcion" \
     --width=590 --height=525 --button=OK:0 --button="Salir":1\
  FALSE 01 "Cambiar nombre de usuario" \
  FALSE 02 "Crear una particion /home separada" \
  FALSE 03 "Crear una particion /boot separada" \
  FALSE 04 "Usar una particion swap existente en lugar de un archivo" \
  FALSE 05 "Cifra la raiz del sistema de archivos (requiere /boot separada)" \
  FALSE 06 "Cifra la particion /home (requiere /home separada)" \
  FALSE 07 "Escribe data aleatoria a las particiones cifradas (mas seguro)" \
  FALSE 08 "Escribe ceros a todas las particiones (para borrar la data previa)" \
  FALSE 09 "No instala el bootloader" \
  FALSE	10 "No formatea el sistema de archivos" \
  FALSE 11 "Usar UUID en /etc/fstab" \
  FALSE 12 "Usar etiquetas del sistema de archivos en /etc/fstab" \
  FALSE 13 "Cambiar hostname" \
  FALSE 14 "Desactivar acceso automatico al escritorio" \
  FALSE 15 "Desactivar acceso automatico a la consola" \
  $var16 16 "Ejecuta scripts pre-instalacion
$pre_install_list" \
  $var17 17 "Ejecuta scripts post-instalacion
$post_install_list")

fi
	if [[ $? = 1 ]] ; then
		exit 0
	fi

if $(echo $opts | grep -q 01); then 
    change_user="yes"
fi
if $(echo $opts | grep -q 02); then
    sep_home="yes"
fi
if $(echo $opts | grep -q 03); then
    sep_boot="yes"
fi
if $(echo $opts | grep -q 04); then
    use_existing_swap="yes"
fi
if $(echo $opts | grep -q 05); then
    encrypt_os="yes"
fi
if $(echo $opts | grep -q 06); then
    encrypt_home="yes"
fi
if $(echo $opts | grep -q 07); then
    write_random="yes"
fi
if $(echo $opts | grep -q 08); then
    write_zero="yes"               
fi
if $(echo $opts | grep -q 09); then
    bootloader="no"
else
    bootloader="yes"
fi
if $(echo $opts | grep -q 10); then
	if [[ $encrypt_os = "yes" ]] || [[ $encrypt_home = "yes" ]]; then
		no_format=""
	else
		no_format="yes"
	fi
fi
if $(echo $opts | grep -q 11); then
	if [[ $encrypt_os = "yes" ]] || [[ $encrypt_home = "yes" ]]; then
		uuid_message="--> UUIDs en fstab no funcionan con sistemas cifrados y
 no seran usados. Edite el fstab manualmente despues de la instalacion."
	else
		use_uuid="yes"
	fi
fi
if $(echo $opts |grep -q 12); then
	if [[ $encrypt_os = "yes" ]] || [[ $encrypt_home = "yes" ]]; then
		disklabel_message="--> Disk labels en fstab no funcionan con sistemas cifrados y
 no seran usados. Edite el fstab manualmente despues de la instalacion."
	elif [[ $use_uuid = "yes" ]]; then
		disklabel_message="--> Este script no puede hacer ambas UUIDs y disk labels para fstab.
 UUIDs sera usado, y usted puede agregar las etiquetas de disk manualmente, despues de la instalacion."
	else
		use_labels="yes"
	fi
fi
if $(echo $opts | grep -q 13); then
	change_hostname="yes"
fi
if $(echo $opts | grep -q 14); then
	disable_auto_desktop="yes"
fi
if $(echo $opts | grep -q 15); then
	disable_auto_console="yes"
fi
if $(echo $opts | grep -q 16); then
	run_preinstall="yes"
else
	run_preinstall="no"
fi
#if $(echo $opts | grep -q 17); then
	run_postinstall="yes"
#else
#	run_postinstall="no"
#fi

if [[ $encrypt_os = "yes" ]] || [[ $encrypt_home = "yes" ]]; then
    if ! [[ -f /sbin/cryptsetup ]] ; then
        yad --title=Error --window-icon=error \
         --button="Proceder sin particiones cifradas":0 \
         --button="Salir":1 --text="Usted necesitas instalar cryptsetup y ejecutar 'sudo modprobe dm-mod' antes de usar el cifrado."
        if [[ $? = 0 ]] ;  then
            encrypt_os="no"
            encrypt_home="no"
        else
            exit 1
        fi
    fi
fi    

## Partition a disk ##### Simple install now does get to partition the disk - uncomment the conditional below to change it back.
#if [[ $install = "expert" ]]; then
yad --title=Particionamiento --text-align=fill --borders=6 --button="Ejecutar GParted":0 --button="Ejecutar cfdisk":1 \
    --button="Saltar este paso":2 --button="Salir":3 \
    --text="  Necesita al menos una particion para instalar el sistema, ademas de una adicional para cada particion que usted seleccione. Si usted ya tiene las particiones, puede saltar este paso.

  Ejecutar particionador ahora?"
	
	ans="$?"
	case $ans in
		0) 	gparted ; check_exit ;;
		1)  xterm  -fa monaco -fs 12 -geometry 90x20+0+0 -hold -e cfdisk ;;
		2)  ;;
		3) exit 0 ;;
	esac
#fi

if [[ $sep_boot = "no" ]]; then
    if [[ $encrypt_os = "yes" ]]; then
        yad --window-icon=error --title=Error \
         --button="Proceder sin particiones cifradas":0 \
         --button="Salir":1 --text="Usted debe tener una particion /boot sin cifrar si usted quiere bootear un sistema operativo cifrado. Puede proceder sin cifrar la raiz del sistema o puede salir y comenzar de nuevo."
        if [[ $? = 0 ]] ;  then
            encrypt_os="no"
        else
            exit 1
        fi
    fi
fi

choose_grub () {
yad --text-align=fill --borders=6 --title="Instalacion de GRUB" --text="  Selecione la ubicacion para instalar GRUB. La opcion comun es colocaro en el MBR del primer disco (/dev/sda).  

		Seleccione MBR para instalar al MBR de cualquier disco.
		Seleccione Perticion para instalar a una particion.
		Seleccione No Bootloader para proceder sin un bootloader. 
		Seleccione Exit para salir de este programa.
		" \
--button=MBR:0 --button=Partition:1 --button="Sin Bootloader":2 --button="Salir":3
answer="$?"

if [[ $answer = 0 ]] ; then
grub_dev=$(find /dev -mindepth 1 -maxdepth 1  -name "*[sh]d[a-z]" \
  | sort | awk '{print "\n" $0 }' \
  | yad --list --separator="" --title=Bootloader --text="Selecione la ubicacion para instalar el bootloader.
" \
  --column ' ' --column 'Disco Duro' --height=200)

	if [[ -z $grub_dev ]] ; then
		yad --title=Error --window-icon=error --button="Si, Estoy seguro.":0 --button="Ir atras":1 \
	--text="Ningun bootloader sera instalado. Esta seguro de continuar?"
			if [[ $? = 1 ]] ; then
				choose_grub
			fi
	elif ! [[ -b $grub_dev ]] ; then
		yad --title=Error  --window-icon=error --button="Salir":0 --button="Ir atras":1 \
	--text="Algo esta mal.  $grub_dev no es un dispositivo de bloques."
			if [[ $? = 0 ]] ; then
				exit 1
			else
				choose_grub
			fi
	fi

elif [[ $answer = 1 ]] ; then
grub_partition=$(find /dev -mindepth 1 -maxdepth 1  -name "*[sh]d[a-z][1-9]*" \
  | sort | awk '{print "\n" $0 }' \
  | yad --list   --title="Bootloader" --text="Seleccione una particion para el bootloader (GRUB)." \
  --separator="" --column ' ' --column 'Particiones' --height=380 --width=150)

	if [[ -z $grub_partition ]] ; then
		yad --title=Error --window-icon=error --button="Si, Estoy seguro.":0 --button="Ir atras":1 \
	--text="Ningun bootloader sera instalado. Esta seguro de continuar?"
			if [[ $? = 1 ]] ; then
				choose_grub
			fi
	elif ! [[ -b $grub_partition ]] ; then
		yad --title=Error  --window-icon=error --button="Salir":0 --button="Ir atras":1 \
	--text="Algo esta mal.  $grub_partition no es un dispositivo de bloques."
			if [[ $? = 0 ]] ; then
				exit 1
			else
				choose_grub
			fi
	fi


elif [[ $answer = 2 ]] ; then
	yad --text-align=fill --borders=6 --title=Bootloader --text="  Procediendo sin un bootloader. 
  Necesitara de un procedimiento especial para bootear su sistema. Be sure that you know what you're doing." \
	--button="Proceder":0 --button="Salir":1
		if [[ $? = 1 ]] ; then
			exit 0
		fi
elif [[ $answer = 3 ]] ; then
	exit 0
fi
}

if [[ $install = "expert" ]]; then
	if [[ $bootloader = "yes" ]]; then
		choose_grub
	fi
fi

if [[ $install = "simple" ]]; then
    grub_dev="/dev/sda"
fi

blkid -c /dev/null | yad --timeout 20 --text-info --title="Lista de particiones" --text="Lista de particiones (para referencia) Usted puede necesitar esto mas adelante." \
--width 820 --height 400 --button="Cerrar":0 &
sleep 2

choose_boot () {
boot_dev=$(find /dev -mindepth 1 -maxdepth 1  -name "*[sh]d[a-z][1-9]*" \
  | sort | awk '{print "\n" $0 }' \
  | yad --list   --title="particion /boot" --text="Seleccione una particion para /boot." \
  --separator="" --column ' ' --column 'Particiones' --height=400 --width=150 --button="OK":0)
}

if [[ $sep_boot = "yes" ]]; then
    choose_boot
fi

choose_fs_boot () {
if [[ -n $boot_dev ]]; then
     fs_type_boot=$(yad --list --title="Sistema de archivos para /boot" --text="Que sistema de archivos le gustaria para $boot_dev?" \
  --separator="" --column "Formato" --height=400 --button="OK":0 \
  "ext2" \
  "ext3" \
  "ext4")
fi

if [[ -z $fs_type_boot ]]; then
    yad --window-icon=error --title=Error --button="Ir atras":0 --button="Salir":1 \
      --text="Debe escoger un sistema de archivos para /boot"
    if [[ $? = 0 ]]; then
        choose_fs_boot
    else
        exit 1
    fi
fi
}

if [[ -n $boot_dev ]]; then
	if [[ $no_format = "yes" ]]; then 
		fs_type_boot=$(blkid -s TYPE "$boot_dev" | awk -F"\"" '{ print $2 }')
	else
		choose_fs_boot
	fi
fi

choose_root () {
install_dev=$(find /dev -mindepth 1 -maxdepth 1  -name "*[sh]d[a-z][1-9]*" \
  | sort | awk '{print "\n" $0 }' \
  | yad --no-click --list --title="Particion raiz" --text="Seleccione una particion para instalar el sistema operativo." \
    --separator="" --column ' ' --column 'Particiones' --height 380 --width 150 --button="OK":0)

if [[ -z $install_dev ]] ; then
    yad --window-icon=error --title=Error  --button="Ir atras":0 --button="Salir":1 \
  --text="No selecciono nada. Debe escoger una particion para la instalacion. Que quiere hacer?"
        if [[ $? = 0 ]] ; then
            choose_root
        else
            exit 1
        fi
elif ! [[ -b $install_dev ]] ; then
    yad --text-align=fill --borders=6 --window-icon=error --title=Error  --button="Ir atras":0 --button="Salir":1 \
  --text="    Algo esta mal. Tal vez usted marco mas de una casilla. Usted dijo que quiere instalar el sistema en: $install_dev"
        if [[ $? = 0 ]] ; then
            choose_root
        else
            exit 1
        fi
elif
    [[ $install_dev = $boot_dev ]] ; then
    yad --window-icon=error --title=Error --text="Selecciono la misma particion para la raiz y para /boot. Intente de nuevo." --button="OK":0
        choose_root
fi
}

choose_root

choose_fs_os () {
fs_type_os=$(yad --list --title="Sistema de archivos para la raiz" --text="Que sistema de archivos le gustaria para $install_dev?" \
  --separator="" --column "Formato" --height=200 --button="OK":0 \
  "ext2" \
  "ext3" \
  "ext4")
if [[ -z $fs_type_os ]]; then
        yad --window-icon=error --title=Error --button="Ir atras":0 --button="Salir":1 \
      --text="Debe escoger un sistema de archivos para
el sistema operativo"
    if [[ $? = 0 ]]; then
        choose_fs_os
    else
        exit 1
    fi
fi  
}

if [[ $install = "expert" ]]; then
	if [[ $no_format = "yes" ]]; then 
		fs_type_os=$(blkid -s TYPE "$install_dev" | awk -F"\"" '{ print $2 }')
	else
		choose_fs_os
	fi
else
    if [[ $grubversion = "grub-pc" ]] ; then
        fs_type_os="ext4"
    else
		fs_type_os="ext3"
	fi
fi

choose_home () {
home_dev=$(find /dev -mindepth 1 -maxdepth 1  -name "*[sh]d[a-z][1-9]*" \
  | sort | awk '{print "\n" $0 }' \
  | yad --list --title="Particion para /home" --text="Seleccione una particion para /home" \
  --separator="" --column ' ' --column 'Particiones' --height=400 --width=150 --button="OK":0)
if [[ -n $home_dev ]] ; then
    if ! [[ -b $home_dev ]] ; then
        yad --info --title=Error --button="Ir atras":0 --button="Salir":1 \
        --text="    Algo esta mal. 
    $home_dev no es un dispositivo de bloques. "
        if [[ $? = 0 ]] ; then
            choose_home
        else
            exit 1
        fi
    elif
        [[ $install_dev = $home_dev ]] ; then
        yad --text-align=fill --borders=6 --window-icon=error --title=Error --text="Selecciono la misma particion para la raiz y para /home. Si usted no quiere una particion separada para /home, haga clic en OK sin seleccionar una." \
         --button="Ir atras":0 --button="Salir":1
        if [[ $? = 0 ]] ; then
            choose_home
        else
            exit 1
        fi
    elif
        [[ $boot_dev = $home_dev ]] ; then
        yad --window-icon=error --title=Error --text="Selecciono la misma particion para /home y para /boot. Intente de nuevo." \
         --button="Ir atras":0 --button="Salir":1
        if [[ $? = 0 ]] ; then
            choose_home
        else
            exit 1
        fi
    fi
fi
}

if [[ $sep_home = "yes" ]]; then
    choose_home
fi

choose_fs_home () {
if [[ -n $home_dev ]]; then
     fs_type_home=$(yad --list --title="Sistema de archivos para /home" --text="Que sistema de archivos le gustaria para $home_dev?" \
  --separator="" --column "Formato" --height=200 --button="OK":0 \
  "ext2" \
  "ext3" \
  "ext4")
fi

if [[ -z $fs_type_home ]]; then
    yad --window-icon=error --title=Error --button="Ir atras":0 --button="Salir":1 \
      --text="Debe escoger un sistema de archivos para /home"
    if [[ $? = 0 ]]; then
        choose_fs_home
    else
        exit 1
    fi
fi
}

if [[ -n $home_dev ]]; then
	if [[ $no_format = "yes" ]]; then 
		fs_type_home=$(blkid -s TYPE "$home_dev" | awk -F"\"" '{ print $2 }')
	else
		choose_fs_home
	fi
fi

choose_swap () {
swap_info=$(/sbin/blkid |grep swap | awk '{print "\n" $0 }'\
| yad --list   --title="Particion swap" --text="Seleccione una particion para swap." \
  --separator="" --column ' ' --column 'Particiones' --height=180 --width=600 --button="OK":0)
swap_dev=$(echo $swap_info | awk -F: '{ print $1 }')
if [[ -z $swap_dev ]] ; then
	yad --text-align=fill --borders=6 --window-icon=error --title=Error --text="No selecciono una particion para swap. Haga clic en OK para usar un archivo en su lugar o en Cancel para salir del programa."
        if [[ $? = 0 ]] ; then
            use_existing_swap=""
        else
            exit 1
        fi
fi
}

if [[ $use_existing_swap = "yes" ]]; then
    choose_swap
fi

fix_hostname () {
	new_hostname=$(yad --text-align=fill --borders=6 --entry --title="Cambio de hostname" \
	--text="Hostname erroneo. Intente de nuevo." \
	--entry-text="$HOSTNAME" --width=500 --button="OK":0)
	test_hostname	
}

test_hostname () {
	if [[ $new_hostname =~ [_]|[@]|[~]|[\!]|[\#]|[=]|[+]|[\&]|[\^]|[\$]|[%]|[\(]|[\)]|[\*]|[\:]|[\;]|[\"]|[\']|[\`]|[,]|[.]|[\<]|[\>]|[\?]|[\{]|[\}]|[\[]|[\]]|[/]|[\|]|[\ ] ]]; then
 		fix_hostname
	elif [[ $new_hostname = -* ]] || [[ $new_hostname = *- ]]; then
		fix_hostname
	elif [[ -z $new_hostname ]]; then
		new_hostname="$HOSTNAME"
	fi
}

select_hostname () {
	new_hostname=$(yad --entry --title="Cambio de hostname" \
	--text="Ingrese el nuevo hostname para el sistema." \
	--entry-text="$HOSTNAME" --width=500 --button="OK":0)
	test_hostname
}


if [[ $change_hostname = "yes" ]]; then
	select_hostname
else
	new_hostname="$HOSTNAME"
fi


if [[ $change_user = "yes" ]]; then
    user_message="--> El nombre de usuario se cambiara."
fi

if [[ -n $grub_dev ]] ; then
    grub_dev_message="--> El bootloader se instalara en $grub_dev"
elif [[ -n $grub_partition ]] ; then
	grub_dev_message="--> El bootloader se instalara en $grub_partition"
else
    grub_dev_message="--> El bootloader no sera instalado."
fi

if [[ $encrypt_os = yes ]] ; then
    os_enc_message=", y sera cifrado."
fi

if [[ -z $home_dev ]] ; then
    home_dev_message="--> /home no estara en una particion separada."
elif
	[[ $no_format = "yes" ]]; then
		home_dev_message="--> /home se instalara en $home_dev"
else
    home_dev_message="--> /home se instalara en $home_dev y formateado como $fs_type_home"
fi

if [[ -n $home_dev ]] && [[ $encrypt_home = yes ]] ; then
    home_enc_message=", y sera cifrado."
fi

if [[ -n $boot_dev ]] ; then
	if [[ $no_format != "yes" ]]; then
		boot_dev_message="--> /boot se instalara en $boot_dev y formateado como $fs_type_boot."
	else
		boot_dev_message="--> /boot se instalara en $boot_dev"
	fi
fi

if [[ $encrypt_os = yes ]] || [[ $encrypt_home = yes ]] ; then
    proceed_message="***  IF YOU PROCEED, YOU WILL NEED TO RESPOND TO SOME QUESTIONS IN THE TERMINAL.   Be prepared to create 
    passphrases for any encrypted partitions (several times each.) When you see the progress bar come up, you can take a break."
fi

if [[ $disable_auto_desktop = "yes" ]]; then
	desktop_message="Autologin en el escritorio se desactivara."
fi

if [[ $disable_auto_console = "yes" ]]; then
	console_message="Autologin en la consola se desactivara."
fi

if [[ $no_format = "yes" ]]; then
	install_dev_message="--> El sistema operativo se instalara en $install_dev, y lo formateara (o lo hizo) manualmente."
else
	install_dev_message="--> El sistema operativo se instalara en $install_dev y formateado como $fs_type_os$os_enc_message"
fi

if [[ $run_preinstall = "yes" ]] ; then
	preinstall_message="los scripts pre-instalador estan activados."
else
	preinstall_message="los scripts pre-instalador estan desactivados."	
fi
if [[ $run_postinstall = "yes" ]] ; then
	postinstall_message="los scripts post-instalador estan activados."
else
	postinstall_message="los scripts post-instalador estan desactivados."	
fi

yad --text-align=fill --borders=6 --info --title=Summary --button="Proceder con la instalacion.":0 --button="Salir":1 \
    --text="Por favor CIERRE cualquier otra aplicacion en ejecucion.

Aqui hay un sumario de lo que se hara. ESTA ES SU ULTIMA OPORTUNIDAD PARA SALIR antes de que algun cambio se haga al disco.

$grub_dev_message
$install_dev_message$os_enc_message
$home_dev_message$home_enc_message
$boot_dev_message
$user_message
$desktop_message
$console_message
$uuid_message
$disklabel_message
$uuid_message
Hostname: $new_hostname
$preinstall_message
$postinstall_message

$proceed_message"
    if [[ $? != 0 ]] ; then
        exit 0
    fi

if [[ $run_preinstall = "yes" ]] ; then
	for file in /usr/lib/refractainstaller/pre-install/* ; do
		if [[ -x $file ]] ; then
			bash $file
		fi
	done
fi

cleanup () {
echo -e "\n @@@ Cleaning up...\n" >> "$error_log"
if $(df | grep -q /target/proc/) ; then
    umount /target/proc/
fi

if $(df | grep -q /target/dev/) ; then
    umount /target/dev/
fi

if $(df | grep -q /target/sys/) ; then
    umount /target/sys/
fi

if $(df | grep -q $boot_dev) ; then
    umount -l $boot_dev
fi

if $(df | grep -q /target_boot) ; then
    umount -l /target_boot/
fi

if $(df | grep -q /target_home) ; then
    umount -l /target_home/
fi

if $(df | grep -q $home_dev) ; then
    umount $home_dev
fi

if $(df | grep -q "\/dev\/mapper\/home_fs") ; then
    umount /dev/mapper/home_fs
fi

if [[ -h /dev/mapper/home_fs ]] ; then
    cryptsetup luksClose home_fs
fi

if $(df | grep -q /target) ; then
    umount -l /target/
fi

if $(df | grep -q $install_dev) ; then
    umount $install_dev
fi    

if $(df | grep "\/dev\/mapper\/root_fs") ; then
    umount /dev/mapper/root_fs
fi

if [[ -h /dev/mapper/root_fs ]] ; then
    cryptsetup luksClose /dev/mapper/root_fs
fi

if [[ -d /target ]] ; then
    rm -rf /target
fi

if [[ -d /target_home ]] ; then
    rm -rf /target_home
fi

if [[ -d /target_boot ]] ; then
    rm -rf /target_boot
fi
}

cleanup

if [[ $write_random = "yes" ]]; then
    if [[ $encrypt_os = "yes" ]]; then
       		exec 2>&1
        dd if=/dev/urandom of="$install_dev"
        exec 2>>"$error_log"
    fi  
fi

if [[ $write_random = "yes" ]]; then
    if [[ $encrypt_home = "yes" ]]; then
		exec 2>&1
        dd if=/dev/urandom of="$home_dev"
        exec 2>>"$error_log"
    fi  
fi

if [[ $write_zero = "yes" ]]; then
    dd if=/dev/zero of="$install_dev"
    if [[ $sep_home = "yes" ]]; then
		exec 2>&1
        dd if=/dev/zero of="$home_dev"

        exec 2>>"$error_log"
    fi
    if [[ $sep_boot = "yes" ]]; then
		exec 2>&1
        dd if=/dev/zero of="$boot_dev"
        exec 2>>"$error_log"
    fi
fi

mkdir /target ;  check_exit
if [[ $encrypt_os = yes ]] ; then
    cryptsetup luksFormat "$install_dev" ; check_exit
    cryptsetup luksOpen "$install_dev" root_fs ; check_exit
    install_part="/dev/mapper/root_fs"
else
    install_part="$install_dev"
fi 
if [[ $no_format != "yes" ]]; then
	mke2fs -q -F -t $fs_type_os "$install_part" ; check_exit 
	tune2fs -r 10000 "$install_part" ; check_exit
fi
mount "$install_part" /target ; check_exit 

if [[ -n $home_dev ]] ; then
    mkdir /target_home ; check_exit
    if [[ $encrypt_home = yes ]]; then
        cryptsetup luksFormat "$home_dev"
        check_exit
        cryptsetup luksOpen "$home_dev" home_fs
        check_exit
        home_part="/dev/mapper/home_fs"
    else
        home_part=$home_dev
	fi
	if [[ $no_format != "yes" ]]; then
	    mke2fs -q -F -t $fs_type_home "$home_part" ; check_exit
	    tune2fs -r 10000 "$home_part" ; check_exit
	fi
    mount "$home_part" /target_home ; check_exit
	sep_home_opt="--exclude=/home/*"
fi

if [[ -n $boot_dev ]] ; then
    mkdir /target_boot ; check_exit
    if [[ $no_format != "yes" ]]; then
		mke2fs -q -F -t $fs_type_boot $boot_dev ; check_exit
	fi
    mount $boot_dev /target_boot
    sep_boot_opt="--exclude=/boot/*"
fi

rsync -av / /target/ --exclude-from="$rsync_excludes" ${sep_home_opt} ${sep_boot_opt} | \
tee >(yad --width=400 --fixed --progress --pulsate --auto-close --auto-kill --skip-taskbar --center --title="INSTALANDO" --progress-text="Copiando el sistema a la nueva particion, por favor espere.")

if ! [[ -z $home_dev ]] ; then
    rsync -av /home/ /target_home/ --exclude-from="$home_boot_excludes" | \
tee >(yad --progress --pulsate --width=350 --auto-close --title="Copiando carpeta home a la nueva particion.")
fi

if [[ -n $boot_dev ]] ; then
    rsync -av /boot/ /target_boot/ --exclude-from="$home_boot_excludes" | \
tee >(yad --progress --pulsate --width=350 --auto-close --title="Copiando archivos a la particion boot.")
fi

if ! [[ $use_existing_swap = "yes" ]] ; then
	dd if=/dev/zero of=/target/swapfile bs="$swapfile_blocksize" count="$swapfile_count" | \
	tee >(yad --progress --pulsate --width=350 --auto-close --title="Creando un archivo swap...")
	mkswap /target/swapfile ; check_exit 
fi

if [[ -f /target/usr/sbin/update-initramfs.distrib ]] ; then
    cp /target/usr/sbin/update-initramfs.distrib /target/usr/sbin/update-initramfs
fi
if [[ -f /target/usr/sbin/update-initramfs.debian ]] ; then
    cp /target/usr/sbin/update-initramfs.debian /target/usr/sbin/update-initramfs
fi

if [[ -f /target/etc/pmount.allow ]] ; then
	if [[ $pmount_fixed = "no" ]] ; then
		sed -i 's:/dev/sd\[a-z\]:#/dev/sd\[a-z\]:' /target/etc/pmount.allow
	fi
fi

if [[ -e /target/usr/bin/updatedb.mlocate ]] ; then
	if ! [[ -x /target/usr/bin/updatedb.mlocate ]] ; then
		chmod +x /target/usr/bin/updatedb.mlocate
	fi
fi

if [[ $disable_auto_desktop = "yes" ]]; then

	#gdm
    if [[ -f /target/etc/gdm/gdm.conf ]]; then
        sed -i 's/^AutomaticLogin/#AutomaticLogin/' /target/etc/gdm/gdm.conf
    fi

	#gdm3
    if [[ -f /target/etc/gdm3/daemon.conf ]]; then
        sed -i 's/^AutomaticLogin/#AutomaticLogin/' /target/etc/gdm3/daemon.conf
    fi

	#lightdm
	if [[ -f /target/etc/lightdm/lightdm.conf ]]; then
		sed -i 's/^autologin/#autologin/g' /target/etc/lightdm/lightdm.conf
	fi

	#kdm
	if [ -f /target/etc/default/kdm.d/live-autologin ]; then
	rm -f /target/etc/default/kdm.d/live-autologin
	fi

	if [ -f /target/etc/kde3/kdm/kdmrc ]; then
	sed -i -e 's/^AutoLogin/#AutoLogin/g' /target/etc/kde3/kdm/kdmrc
	sed -i -e 's/^AutoReLogin/#AutoReLogin/g' /target/etc/kde3/kdm/kdmrc
	fi

	if [ -f /target/etc/kde4/kdm/kdmrc ]; then
	sed -i -e 's/^AutoLogin/#AutoLogin/g' /target/etc/kde4/kdm/kdmrc
	sed -i -e 's/^AutoReLogin/#AutoReLogin/g' /target/etc/kde4/kdm/kdmrc
	fi

	#trinity
	if [[ -f /target/etc/default/kdm-trinity.d/live-autologin ]]; then
		sed -i 's/^AUTOLOGIN/#AUTOLOGIN/g' /target/etc/default/kdm-trinity.d/live-autologin
	fi
	
	if [ -f /target/etc/trinity/kdm/kdmrc ]; then
	sed -i -e 's/^AutoLogin/#AutoLogin/g' /target/etc/trinity/kdm/kdmrc
	sed -i -e 's/^AutoReLogin/#AutoReLogin/g' /target/etc/trinity/kdm/kdmrc
	fi

fi	

if [[ $disable_auto_console = "yes" ]]; then
	if grep -q "respawn:/bin/login -f" /target/etc/inittab ; then
		mv /target/etc/inittab /target/etc/inittab.$(date +%Y%m%d_%H%M)
		cp /usr/lib/refractainstaller/inittab.debian /target/etc/inittab
	fi
fi

if ! [[ $new_hostname = $HOSTNAME ]]; then
		sed -i "s/$HOSTNAME/$new_hostname/" /target/etc/hostname
		sed -i "s/$HOSTNAME/$new_hostname/g" /target/etc/hosts
fi

if [[ $encrypt_os != "yes" ]]; then
	if [[ $use_uuid = yes ]]; then
		install_part="$(blkid -s UUID $install_dev | awk '{ print $2 }' | sed 's/\"//g')"
	elif [[ $use_labels = yes ]]; then
			rootfslabel=$(/sbin/blkid -c /dev/null -s LABEL $install_dev | awk -F"\"" '{ print $2 }')
			if [[ -n $rootfslabel ]]; then
				install_part="LABEL=$rootfslabel"
			else
				rootfslabel=$(yad  --entry --title="Filesystem Label"  --text="Enter a disk label for $install_dev" --width=300 --button="OK":0)
				if [[ -n $rootfslabel ]]; then
					e2label "$install_dev"  "$rootfslabel"
					install_part="LABEL=$rootfslabel"
				else
					install_part="$install_dev"
				fi
			fi
	else
		install_part="$install_dev"
	fi
fi
echo -e "proc\t\t/proc\tproc\tdefaults\t0\t0
$install_part\t/\t$fs_type_os\tdefaults,noatime\t0\t1" > /target/etc/fstab
check_exit

if ! [[ -z $home_dev ]] ; then
	if [[ $encrypt_os != "yes" ]]; then
		if [[ $use_uuid = yes ]]; then
			home_part="$(blkid -s UUID $home_dev | awk '{ print $2 }' | sed 's/\"//g')"
		elif [[ $use_labels = yes ]]; then
				homefslabel=$(/sbin/blkid -c /dev/null -s LABEL $home_dev | awk -F"\"" '{ print $2 }')
				if [[ -n $homefslabel ]]; then
					home_part="LABEL=$homefslabel"
				else
					homefslabel=$(yad  --entry --title="Filesystem Label"  --text="Enter a disk label for $home_dev" --width=300 --button="OK":0)
					if [[ -n $homefslabel ]]; then
						e2label "$home_dev"  "$homefslabel"
						home_part="LABEL=$homefslabel"
					else
						home_part="$home_dev"
					fi
				fi
		else
			home_part="$home_dev"
		fi
	fi
    echo -e "$home_part\t/home\t$fs_type_home\tdefaults,noatime\t0\t2" >> /target/etc/fstab
    check_exit
fi

if [[ -n $boot_dev ]] ; then
	if [[ $use_uuid = yes ]]; then
		boot_part="$(blkid -s UUID $boot_dev | awk '{ print $2 }' | sed 's/\"//g')"
	elif [[ $use_labels = yes ]]; then
			bootfslabel=$(/sbin/blkid -c /dev/null -s LABEL $boot_dev | awk -F"\"" '{ print $2 }')
			if [[ -n $bootfslabel ]]; then
				boot_part="LABEL=$bootfslabel"
			else
				bootfslabel=$(yad  --entry --title="Filesystem Label"  --text="Enter a disk label for $boot_dev" --width=300 --button="OK":0)
				if [[ -n $bootfslabel ]]; then
					e2label "$boot_dev"  "$bootfslabel"
					boot_part="LABEL=$bootfslabel"
				else
					boot_part="$boot_dev"
				fi
			fi
	else
		boot_part="$boot_dev"
	fi
    echo -e "$boot_part\t/boot\t$fs_type_boot\tdefaults,noatime,\t0\t2" >> /target/etc/fstab
    check_exit
fi

if [[ $use_existing_swap = "yes" ]] ; then
	if [[ $use_uuid = yes ]]; then
		swap_part="$(/sbin/blkid -s UUID $swap_dev | awk '{ print $2 }' | sed 's/\"//g')"
	else
		swap_part="$swap_dev"
	fi
    echo -e "\n Adding swap entry to fstab...\n"
    echo -e "$swap_part\tswap\tswap\tdefaults\t0\t0" >> /target/etc/fstab
elif ! [[ $use_existing_swap = "yes" ]] ; then
	echo -e "/swapfile\tswap\tswap\tdefaults\t0\t0" >> /target/etc/fstab
fi

if [[ $encrypt_os = yes ]] ; then
    echo -e "root_fs\t\t$install_dev\t\tnone\t\tluks" >> /target/etc/crypttab
fi

if [[ $encrypt_home = yes ]] ; then
    echo -e "home_fs\t\t$home_dev\t\tnone\t\tluks" >> /target/etc/crypttab
fi

mount -t tmpfs --bind /dev/ /target/dev/ ; check_exit 
mount -t proc --bind /proc/ /target/proc/ ; check_exit 
mount -t sysfs --bind /sys/ /target/sys/ ; check_exit 

if type -p freshclam ; then
	if [[ $enable_freshclam = "yes" ]] ; then
		if ! [[ -h /target/etc/rc2.d/S02clamav-freshclam ]] ; then
			chroot /target update-rc.d clamav-freshclam defaults
		fi
	fi
fi

if [[ -f /etc/ssh/sshd_config ]] ; then
	if [[ $root_ssh = "no" ]] ; then
		sed -i~ 's/PermitRootLogin yes/PermitRootLogin no/' /target/etc/ssh/sshd_config
	fi
fi

if [[ -n $boot_dev ]] ; then
    chroot /target mount $boot_dev /boot
fi

if [[ -n $grub_partition ]] ; then
	if [[ $grubversion != "grub-pc" ]] ; then

		# isolate the device (sdx) letter then use tr like this to translate to the right number for grub
		GRUBDEVICENUM=$(echo $grub_partition |sed 's:/dev/sd::' |sed 's:[0-9]::'g |tr '[a-j]' '[0-9]')

		# isolate the partition number
		INSTALLPARTNUM=$(echo $grub_partition |sed 's:/dev/sd::'|sed 's:[a-z]::')

		# and reduce it by 1 for grub
		GRUBPARTNUM=$(expr $INSTALLPARTNUM - 1)

		# finally get the finished grub root syntax
		GRUBROOT="(hd$GRUBDEVICENUM,$GRUBPARTNUM)"


		chroot /target /bin/bash grub-install $grub_partition
		grub --batch <<EOF
		root $GRUBROOT
		setup $GRUBROOT
		quit
EOF

	else
		error_message="grub-install failed."
		chroot /target /bin/bash grub-install --recheck --no-floppy --force $grub_partition >> "$error_log" ; check_exit
	fi
fi

if [[ -n $grub_dev ]]; then
    echo -e "\n Installing the boot loader...\n" >> "$error_log"
    error_message="grub-install failed."
    chroot /target grub-install $grub_dev >> "$error_log" ; check_exit
fi

error_message=""

if [[ $encrypt_os = yes ]] || [[ $encrypt_home = yes ]] ; then
    chroot /target /usr/sbin/update-initramfs.orig.initramfs-tools -u >> "$error_log"
fi

if [[ -n $grub_dev ]] || [[ -n $grub_partition ]] ; then
    chroot /target update-grub ; check_exit 
fi

if [[ $sep_home = "yes" ]]; then
    mount $home_part /target/home
fi

if [[ $change_user = "yes" ]]; then
	oldname=$(awk -F: '/1000:1000/ { print $1 }' /target/etc/passwd)
	newname=$(yad --entry --entry-text="$oldname" --title="Cambio de username" --text="Ingrese el nombre de usuario que quiera usar." --width=300 --button="OK":0)

	chroot /target usermod -l $newname $oldname ; check_exit
	chroot /target groupmod -n $newname $oldname ; check_exit
	chroot /target usermod -d /home/$newname -m $newname ; check_exit

	for i in $(grep -r "/home/$oldname" /target/home/$newname/.config | awk -F":" '{ print $1 }'); do
		sed -i "s/\/home\/$oldname/\/home\/$newname/g" "$i"
	done

	for i in $(grep -r "/home/$oldname" /target/home/$newname/.local | awk -F":" '{ print $1 }'); do
		sed -i "s/\/home\/$oldname/\/home\/$newname/g" "$i"
	done
fi

if [[ $change_user = "yes" ]]; then
    live_user=$(awk -v pattern="$newname" -F: '$1 ~ pattern { print $5 }' /target/etc/passwd)
    real_name=$(yad --entry --title="Cambio de el nombre real" --text="El nombre actual es $live_user.
Ingrese el nombre que quiera usar \(sin comas\)." --width=350 --button="OK":0)
    sed -i~ "s/$live_user/$real_name,,,/" /target/etc/passwd
fi

if [[ $install = "expert" ]]; then
    yad --text-align=fill --borders=6 --title="Edicion de /etc/sudoers" --button="Si":0 --button=No:1 \
     --text="Puede que necesite editar /etc/sudoers para comentar la linea que da a $oldname poder absoluto, o reemplace $oldname con $newname.
 
Editar /etc/sudoers ahora?" 
	ans="$?"
    if [[ $ans = "0" ]]; then
        edit_sudoers="yes"
        chroot /target visudo
    fi
fi

if [[ $edit_sudoers = "yes" ]]; then
    yad --text-align=fill --borders=6 --title="Desactivar modo sudo para gksu" --button="Si, yo comente la linea.":0 --button="No, Yo reemplace la linea.":1 \
     --text="Si usted comento la linea en /etc/sudoers, uno o mas archivos seran cambiados para que gksu funcione correctamente." 
		ans="$?"
        if [[ $ans = "0" ]]; then
            if [[ -n $newname ]]; then
                sed -i~ '/sudo-mode/s/true/false/' /target/home/"$newname"/.gconf/apps/gksu/%gconf.xml
            else
                sed -i~ '/sudo-mode/s/true/false/' /target/home/user/.gconf/apps/gksu/%gconf.xml
            fi
        fi
fi

if [[ $install = "expert" ]]; then
    yad --text-align=fill --borders=6 --title="Cambiar clave de root" --button="Si":0 --button=No:1 \
     --text="Le gustaria cambiar la clave de root? (Recomendado)"
		ans="$?"
        if [[ $ans = 0 ]]; then
		exec 2>&1
            chroot /target passwd
        exec 2>>"$error_log"
        fi 
fi

if [[ $change_user = "yes" ]]; then
    yad --text-align=fill --borders=6 --title="Cambio de clave de usuario" --button="Si":0 --button="No":1 \
     --text="Le gustaria cambiar la clave del usuario?" 
		ans="$?"
        if [[ $ans = 0 ]]; then
		exec 2>&1
            chroot /target passwd "$newname"
        exec 2>>"$error_log"
        fi
fi

if [[ $run_postinstall = "yes" ]] ; then
	for file in /usr/lib/refractainstaller/post-install/* ; do
		if [[ -x "$file" ]] ; then
			bash "$file"
		fi
	done
fi

cp "$error_log" /target/var/log/
cleanup

yad --image=gtk-dialog-info --timeout 10 --fixed --center --width=500 --title=Instalador --text-align=fill --borders=6 --button="Apagar":0 --button="Reiniciar":1 --button="Salir":2 --text=" Instalacion completa. \n\n Usted puede reiniciar en el nuevo sistema.\n\n Recuerde remover el medio de instalacion.\n"
ans="$?"
case $ans in
	0) poweroff ;;
	1) reboot ;;
	2) exit 0;;
esac

exit 0
